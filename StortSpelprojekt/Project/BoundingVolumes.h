#pragma once
#include "Drawable.h"

enum class VolumeType { BOX, SPHERE };

struct BoxVolumeData
{
	static const UINT INDICES = 36;
	static const UINT VERTICES = 8;

	static const UINT indices[BoxVolumeData::INDICES];

	static const Vector3 vertices[BoxVolumeData::VERTICES];
};
inline const Vector3 BoxVolumeData::vertices[BoxVolumeData::VERTICES] =
{
	{-1.0 , -1.0, 1.0},
	{1.0 , -1.0, 1.0},
	{-1.0 , 1.0, 1.0},
	{1.0 , 1.0, 1.0},
	{-1.0 , 1.0, -1.0},
	{1.0 , 1.0, -1.0},
	{-1.0 , -1.0, -1.0},
	{1.0 , -1.0, -1.0},
};

inline const UINT BoxVolumeData::indices[BoxVolumeData::INDICES] =
{
	1, 2, 3,
	3, 2, 4,
	3, 4, 5,
	5, 4, 6,
	5, 6, 7,
	7, 6, 8,
	7, 8, 1,
	1, 8, 2,
	2, 8, 4,
	4, 8, 6,
	7, 1, 5,
	5, 1, 3
};

struct SphereVolumeData
{
	static const UINT INDICES = 240;
	static const UINT VERTICES = 42;

	static const UINT indices[SphereVolumeData::INDICES];

	static const Vector3 vertices[SphereVolumeData::VERTICES];
};

inline const UINT SphereVolumeData::indices[SphereVolumeData::INDICES] =
{
	1,2,9,
	9,2,10,
	2,3,10,
	10,3,11,
	3,4,11,
	11,4,12,
	4,5,12,
	12,5,13,
	5,6,13,
	13,6,14,
	6,7,14,
	14,7,15,
	7,8,15,
	15,8,16,
	8,1,16,
	19,1,9,
	9,10,17,
	17,10,18,
	10,11,18,
	19,11,19,
	11,12,19,
	19,12,20,
	12,13,20,
	20,13,21,
	13,14,21,
	21,14,22,
	14,15,22,
	22,15,23,
	15,16,23,
	23,16,24,
	16,9,24,
	24,9,17,
	17,18,25,
	25,18,26,
	18,19,26,
	26,19,27,
	19,20,27,
	27,20,28,
	20,21,28,
	28,21,29,
	21,22,29,
	29,22,30,
	22,23,30,
	30,23,31,
	23,24,31,
	31,24,32,
	24,17,32,
	32,17,25,
	25,26,33,
	33,26,34,
	26,27,34,
	34,27,35,
	27,28,35,
	35,28,36,
	28,29,36,
	36,29,37,
	29,30,37,
	37,30,38,
	30,31,38,
	38,31,39,
	31,32,39,
	39,32,40,
	32,25,40,
	40,25,33,
	2,1,41,
	3,2,41,
	4,3,41,
	5,4,41,
	6,5,41,
	7,6,41,
	8,7,41,
	1,8,41,
	33,34,42,
	34,35,42,
	35,36,42,
	36,37,42,
	37,38,42,
	38,39,42,
	39,40,42,
	40,33,42
};

inline const Vector3 SphereVolumeData::vertices[SphereVolumeData::VERTICES] =
{
	{0.353553,-0.866025, -0.353553},
	{0.000000,-0.866025, -0.500000},
	{-0.353553,-0.866025, -0.353553},
	{-0.500000,-0.866025, 0.000000},
	{-0.353553,-0.866025, 0.353553},
	{0.000000,-0.866025, 0.500000},
	{0.353553,-0.866025, 0.353553},
	{0.500000,-0.866025, 0.000000},
	{0.612372,-0.500000, -0.612372},
	{0.000000,-0.500000, -0.866025},
	{-0.612372,-0.500000, -0.612372},
	{-0.866025,-0.500000, 0.000000},
	{-0.612372,-0.500000, 0.612372},
	{0.000000,-0.500000, 0.866025},
	{0.612372,-0.500000, 0.612372},
	{0.866025,-0.500000, 0.000000},
	{0.707107,0.000000, -0.707107},
	{0.000000, 0.000000, -1.000000},
	{-0.707107,0.000000, -0.707107},
	{-1.000000,0.000000, 0.000000},
	{-0.707107,0.000000, 0.707107},
	{0.000000, 0.000000, 1.000000},
	{0.707107, 0.000000,0.707107},
	{1.000000, 0.000000, 0.000000},
	{0.612372, 0.500000, -0.612372},
	{0.000000, 0.500000, -0.866025},
	{-0.612372, 0.500000, -0.612372},
	{-0.866025, 0.500000, 0.000000},
	{-0.612372, 0.500000, 0.612372},
	{0.000000, 0.500000, 0.866025},
	{0.612372, 0.500000, 0.612372},
	{0.866025, 0.500000, 0.000000},
	{0.353553, 0.866025, -0.353553},
	{0.000000, 0.866025, -0.500000},
	{-0.353553, 0.866025, -0.353553},
	{-0.500000, 0.866025, 0.000000},
	{-0.353553, 0.866025, 0.353553},
	{0.000000, 0.866025, 0.500000},
	{0.353553, 0.866025, 0.353553},
	{0.500000, 0.866025, 0.000000},
	{0.000000, -1.000000, 0.000000},
	{0.000000, 1.000000, 0.000000}
};

struct BoundingVolume : public Drawable
{
	VolumeType type;
	BoundingVolume(VolumeType type) : type(type) {}
	void Update() { UpdateMatrix(); }
};

struct BoxVolume : virtual public BoundingVolume
{
	BoxVolume() : BoundingVolume(VolumeType::BOX){}
};

struct SphereVolume : virtual public BoundingVolume
{
	SphereVolume() : BoundingVolume(VolumeType::SPHERE) {}
};