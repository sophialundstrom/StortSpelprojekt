#pragma once
#include "Drawable.h"

enum class VolumeType { BOX, SPHERE };

struct BoxVolumeData
{
	static const UINT INDICES = 36;
	static const UINT VERTICES = 8;

	static const UINT indices[BoxVolumeData::INDICES];
	static const UINT reversedindices[BoxVolumeData::INDICES];

	static const Vector3 vertices[BoxVolumeData::VERTICES];
};
inline const Vector3 BoxVolumeData::vertices[BoxVolumeData::VERTICES] =
{
	{1.0 , -1.0, -1.0},
	{-1.0 , -1.0, -1.0},
	{-1.0 , 1.0, -1.0},
	{1.0 , 1.0, -1.0},
	{1.0 , -1.0, 1.0},
	{-1.0 , -1.0, 1.0},
	{-1.0 , 1.0, 1.0},
	{1.0 , 1.0, 1.0},
};


inline const UINT BoxVolumeData::indices[BoxVolumeData::INDICES] =
{
	0, 2, 3,
	0, 1, 2,
	4, 0, 3,
	4, 3, 7,
	7, 3, 2,
	7, 2, 6,
	5, 4, 7,
	5, 7, 6,
	1, 5, 6,
	1, 6, 2,
	0, 4, 5,
	0, 5, 1
};

inline const UINT BoxVolumeData::reversedindices[BoxVolumeData::INDICES] =
{

	3, 2, 0,
	2, 1, 0,
	3, 0, 4,
	7, 3, 4,
	2, 3, 7,
	6, 2, 7,
	7, 4, 5,
	6, 7, 5,
	6, 5, 1,
	2, 6, 1,
	5, 4, 0,
	1, 5, 0

};



struct SphereVolumeData
{
	static const UINT INDICES = 240;
	static const UINT VERTICES = 42;

	static const UINT indices[SphereVolumeData::INDICES];

	static const Vector3 vertices[SphereVolumeData::VERTICES];
};

inline const UINT SphereVolumeData::indices[SphereVolumeData::INDICES] =
{
	0,1,8,8,1,9,1,2,9,9,2,10,2,3,10,10,3,11,3,4,11,11,4,12,4,5,12,12,5,13,5,6,13,13,6,14,6,7,14,14,7,15,7,0,15,15,0,8,8,9,16,16,9,17,9,10,17,17,10,18,10,11,18,18,11,19,11,12,19,19,12,20,12,13,20,20,13,21,13,14,21,21,14,22,14,15,22,22,15,23,15,8,23,23,8,16,16,17,24,24,17,25,17,18,25,25,18,26,18,19,26,26,19,27,19,20,27,27,20,28,20,21,28,28,21,29,21,22,29,29,22,30,22,23,30,30,23,31,23,16,31,31,16,24,24,25,32,32,25,33,25,26,33,33,26,34,26,27,34,34,27,35,27,28,35,35,28,36,28,29,36,36,29,37,29,30,37,37,30,38,30,31,38,38,31,39,31,24,39,39,24,32,1,0,40,2,1,40,3,2,40,4,3,40,5,4,40,6,5,40,7,6,40,0,7,40,32,33,41,33,34,41,34,35,41,35,36,41,36,37,41,37,38,41,38,39,41,39,32,41,
};

inline const Vector3 SphereVolumeData::vertices[SphereVolumeData::VERTICES] =
{
{0.3535533547401428,-0.8660253882408142,-0.3535533547401428,},
{0.0,-0.8660253882408142,-0.4999999403953552,},
{-0.3535533547401428,-0.8660253882408142,-0.3535533547401428,},
{-0.4999999403953552,-0.8660253882408142,0.0,},
{-0.3535533547401428,-0.8660253882408142,0.3535533547401428,},
{0.0,-0.8660253882408142,0.4999999701976776,},
{0.3535533845424652,-0.8660253882408142,0.3535533845424652,},
{0.5,-0.8660253882408142,0.0,},
{0.6123723983764648,-0.4999999701976776,-0.6123723983764648,},
{0.0,-0.4999999701976776,-0.8660253286361694,},
{-0.6123723983764648,-0.4999999701976776,-0.6123723983764648,},
{-0.8660253286361694,-0.4999999701976776,0.0,},
{-0.6123723983764648,-0.4999999701976776,0.6123723983764648,},
{0.0,-0.4999999701976776,0.8660253882408142,},
{0.6123724579811096,-0.4999999701976776,0.6123724579811096,},
{0.866025447845459,-0.4999999701976776,0.0,},
{0.7071067094802856,0.0,-0.7071067094802856,},
{0.0,0.0,-0.9999998807907104,},
{-0.7071067094802856,0.0,-0.7071067094802856,},
{-0.9999998807907104,0.0,0.0,},
{-0.7071067094802856,0.0,0.7071067094802856,},
{0.0,0.0,0.9999999403953552,},
{0.7071067690849304,0.0,0.7071067690849304,},
{1.0,0.0,0.0,},
{0.6123723983764648,0.4999999701976776,-0.6123723983764648,},
{0.0,0.4999999701976776,-0.8660253286361694,},
{-0.6123723983764648,0.4999999701976776,-0.6123723983764648,},
{-0.8660253286361694,0.4999999701976776,0.0,},
{-0.6123723983764648,0.4999999701976776,0.6123723983764648,},
{0.0,0.4999999701976776,0.8660253882408142,},
{0.6123724579811096,0.4999999701976776,0.6123724579811096,},
{0.866025447845459,0.4999999701976776,0.0,},
{0.3535533547401428,0.8660253882408142,-0.3535533547401428,},
{0.0,0.8660253882408142,-0.4999999403953552,},
{-0.3535533547401428,0.8660253882408142,-0.3535533547401428,},
{-0.4999999403953552,0.8660253882408142,0.0,},
{-0.3535533547401428,0.8660253882408142,0.3535533547401428,},
{0.0,0.8660253882408142,0.4999999701976776,},
{0.3535533845424652,0.8660253882408142,0.3535533845424652,},
{0.5,0.8660253882408142,0.0,},
{0.0,-1.0,0.0,},
{0.0,1.0,0.0,},
};

struct BoundingVolume : public Drawable
{
	VolumeType type;
	BoundingVolume(VolumeType type) : type(type) {}
	void Update() { UpdateMatrix(); }
};

struct BoxVolume : virtual public BoundingVolume
{
	BoxVolume() : BoundingVolume(VolumeType::BOX){}
};

struct SphereVolume : virtual public BoundingVolume
{
	SphereVolume() : BoundingVolume(VolumeType::SPHERE) {}
};